{
  "version": 3,
  "sources": ["../../echarts/lib/data/helper/SeriesDataSchema.js"],
  "sourcesContent": ["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { createHashMap, isObject, retrieve2 } from 'zrender/lib/core/util.js';\nimport { makeInner } from '../../util/model.js';\nimport { shouldRetrieveDataByName } from '../Source.js';\nvar inner = makeInner();\nvar dimTypeShort = {\n  float: 'f',\n  int: 'i',\n  ordinal: 'o',\n  number: 'n',\n  time: 't'\n};\n/**\r\n * Represents the dimension requirement of a series.\r\n *\r\n * NOTICE:\r\n * When there are too many dimensions in dataset and many series, only the used dimensions\r\n * (i.e., used by coord sys and declared in `series.encode`) are add to `dimensionDefineList`.\r\n * But users may query data by other unused dimension names.\r\n * In this case, users can only query data if and only if they have defined dimension names\r\n * via ec option, so we provide `getDimensionIndexFromSource`, which only query them from\r\n * `source` dimensions.\r\n */\nvar SeriesDataSchema = /** @class */function () {\n  function SeriesDataSchema(opt) {\n    this.dimensions = opt.dimensions;\n    this._dimOmitted = opt.dimensionOmitted;\n    this.source = opt.source;\n    this._fullDimCount = opt.fullDimensionCount;\n    this._updateDimOmitted(opt.dimensionOmitted);\n  }\n  SeriesDataSchema.prototype.isDimensionOmitted = function () {\n    return this._dimOmitted;\n  };\n  SeriesDataSchema.prototype._updateDimOmitted = function (dimensionOmitted) {\n    this._dimOmitted = dimensionOmitted;\n    if (!dimensionOmitted) {\n      return;\n    }\n    if (!this._dimNameMap) {\n      this._dimNameMap = ensureSourceDimNameMap(this.source);\n    }\n  };\n  /**\r\n   * @caution Can only be used when `dimensionOmitted: true`.\r\n   *\r\n   * Get index by user defined dimension name (i.e., not internal generate name).\r\n   * That is, get index from `dimensionsDefine`.\r\n   * If no `dimensionsDefine`, or no name get, return -1.\r\n   */\n  SeriesDataSchema.prototype.getSourceDimensionIndex = function (dimName) {\n    return retrieve2(this._dimNameMap.get(dimName), -1);\n  };\n  /**\r\n   * @caution Can only be used when `dimensionOmitted: true`.\r\n   *\r\n   * Notice: may return `null`/`undefined` if user not specify dimension names.\r\n   */\n  SeriesDataSchema.prototype.getSourceDimension = function (dimIndex) {\n    var dimensionsDefine = this.source.dimensionsDefine;\n    if (dimensionsDefine) {\n      return dimensionsDefine[dimIndex];\n    }\n  };\n  SeriesDataSchema.prototype.makeStoreSchema = function () {\n    var dimCount = this._fullDimCount;\n    var willRetrieveDataByName = shouldRetrieveDataByName(this.source);\n    var makeHashStrict = !shouldOmitUnusedDimensions(dimCount);\n    // If source don't have dimensions or series don't omit unsed dimensions.\n    // Generate from seriesDimList directly\n    var dimHash = '';\n    var dims = [];\n    for (var fullDimIdx = 0, seriesDimIdx = 0; fullDimIdx < dimCount; fullDimIdx++) {\n      var property = void 0;\n      var type = void 0;\n      var ordinalMeta = void 0;\n      var seriesDimDef = this.dimensions[seriesDimIdx];\n      // The list has been sorted by `storeDimIndex` asc.\n      if (seriesDimDef && seriesDimDef.storeDimIndex === fullDimIdx) {\n        property = willRetrieveDataByName ? seriesDimDef.name : null;\n        type = seriesDimDef.type;\n        ordinalMeta = seriesDimDef.ordinalMeta;\n        seriesDimIdx++;\n      } else {\n        var sourceDimDef = this.getSourceDimension(fullDimIdx);\n        if (sourceDimDef) {\n          property = willRetrieveDataByName ? sourceDimDef.name : null;\n          type = sourceDimDef.type;\n        }\n      }\n      dims.push({\n        property: property,\n        type: type,\n        ordinalMeta: ordinalMeta\n      });\n      // If retrieving data by index,\n      //   use <index, type, ordinalMeta> to determine whether data can be shared.\n      //   (Because in this case there might be no dimension name defined in dataset, but indices always exists).\n      //   (Indices are always 0, 1, 2, ..., so we can ignore them to shorten the hash).\n      // Otherwise if retrieving data by property name (like `data: [{aa: 123, bb: 765}, ...]`),\n      //   use <property, type, ordinalMeta> in hash.\n      if (willRetrieveDataByName && property != null\n      // For data stack, we have make sure each series has its own dim on this store.\n      // So we do not add property to hash to make sure they can share this store.\n      && (!seriesDimDef || !seriesDimDef.isCalculationCoord)) {\n        dimHash += makeHashStrict\n        // Use escape character '`' in case that property name contains '$'.\n        ? property.replace(/\\`/g, '`1').replace(/\\$/g, '`2')\n        // For better performance, when there are large dimensions, tolerant this defects that hardly meet.\n        : property;\n      }\n      dimHash += '$';\n      dimHash += dimTypeShort[type] || 'f';\n      if (ordinalMeta) {\n        dimHash += ordinalMeta.uid;\n      }\n      dimHash += '$';\n    }\n    // Source from endpoint(usually series) will be read differently\n    // when seriesLayoutBy or startIndex(which is affected by sourceHeader) are different.\n    // So we use this three props as key.\n    var source = this.source;\n    var hash = [source.seriesLayoutBy, source.startIndex, dimHash].join('$$');\n    return {\n      dimensions: dims,\n      hash: hash\n    };\n  };\n  SeriesDataSchema.prototype.makeOutputDimensionNames = function () {\n    var result = [];\n    for (var fullDimIdx = 0, seriesDimIdx = 0; fullDimIdx < this._fullDimCount; fullDimIdx++) {\n      var name_1 = void 0;\n      var seriesDimDef = this.dimensions[seriesDimIdx];\n      // The list has been sorted by `storeDimIndex` asc.\n      if (seriesDimDef && seriesDimDef.storeDimIndex === fullDimIdx) {\n        if (!seriesDimDef.isCalculationCoord) {\n          name_1 = seriesDimDef.name;\n        }\n        seriesDimIdx++;\n      } else {\n        var sourceDimDef = this.getSourceDimension(fullDimIdx);\n        if (sourceDimDef) {\n          name_1 = sourceDimDef.name;\n        }\n      }\n      result.push(name_1);\n    }\n    return result;\n  };\n  SeriesDataSchema.prototype.appendCalculationDimension = function (dimDef) {\n    this.dimensions.push(dimDef);\n    dimDef.isCalculationCoord = true;\n    this._fullDimCount++;\n    // If append dimension on a data store, consider the store\n    // might be shared by different series, series dimensions not\n    // really map to store dimensions.\n    this._updateDimOmitted(true);\n  };\n  return SeriesDataSchema;\n}();\nexport { SeriesDataSchema };\nexport function isSeriesDataSchema(schema) {\n  return schema instanceof SeriesDataSchema;\n}\nexport function createDimNameMap(dimsDef) {\n  var dataDimNameMap = createHashMap();\n  for (var i = 0; i < (dimsDef || []).length; i++) {\n    var dimDefItemRaw = dimsDef[i];\n    var userDimName = isObject(dimDefItemRaw) ? dimDefItemRaw.name : dimDefItemRaw;\n    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\n      dataDimNameMap.set(userDimName, i);\n    }\n  }\n  return dataDimNameMap;\n}\nexport function ensureSourceDimNameMap(source) {\n  var innerSource = inner(source);\n  return innerSource.dimNameMap || (innerSource.dimNameMap = createDimNameMap(source.dimensionsDefine));\n}\nexport function shouldOmitUnusedDimensions(dimCount) {\n  return dimCount > 30;\n}"],
  "mappings": "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",
  "names": ["SeriesDataSchema"]
}
